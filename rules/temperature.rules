import org.eclipse.xtext.xbase.lib.Functions
import java.util.concurrent.locks.ReentrantLock
var ldtuya = 0
var ldtuyaBad = 0
val ReentrantLock locktuya  = new ReentrantLock()
var _DEBUG = true
var db = true
/*
Use the following to config items holding the id and key of device
send command to tuya_config to apply values to items. 
var LivingRoomHeaterDetailsConfig = "-ip 192.168.x.y -id 0123123sdfdf312312f -key 13mfdkj32lj213"
var BedroomHeaterDetailsConfig = "-ip 192.168.x.z -id 324132dsasad21213123 -key sdfsdf32wdedewd"

rule "TuyaConfig"
    when
		Item tuya_config received command
	then
    LivingRoomHeaterDetails.sendCommand(LivingRoomHeaterDetailsConfig)
    BedroomHeaterDetails.sendCommand(BedroomHeaterDetailsConfig)
    logInfo("tuya config Living room {} and heater {}", LivingRoomHeaterDetails.state.toString, BedroomHeaterDetails.state.toString)
end
*/
val Functions$Function2<String, String, String> tuyaExec= [ c, r |
    if(db) { logInfo("Tuya", "Execute [{}] ", c)}

    var resp = executeCommandLine("/usr/bin/node /etc/openhab2/scripts/njstuya.js " + c, 50000) + " "
    return resp
]

val Functions$Function2<GenericItem, String, String> tuyaAction= [ s, c |
    //if(db) { logInfo("lambda", s.state.toString)

    var intString = c
    if(db) {logInfo("Tuya", "Execute action [{}] ", c)}
    //problem with script so cant get respoinse directly
    Thread::sleep(10)
    var resp = executeCommandLine("/usr/bin/node /etc/openhab2/scripts/njstuya.js " + c, 50000)
    // var resp = tuyaExec.apply(intString, "rand")
    logInfo("Tuya", "Execute action [{}] : resp [{}]", c, resp)
    if(resp.contains("Error") || resp.contains("Warning")){
        s.postUpdate("UNDEF")
        gTuya.postUpdate("UNDEF")
        ldtuyaBad = ldtuyaBad + 1
    }
    else
    {
        s.postUpdate(resp)
        ldtuya = ldtuya + 1
    }
    tuya_lastConnection.sendCommand(now.toString)
    Thread::sleep(100)
    //s.state.toString + " logged" not sure what this does
    return resp
]

val Functions$Function1<String, String> getTuyaStatus= [ c |
    //if(db) { logInfo("lambda", s.state.toString)
    var njsArg = c
    var tuyaLog = "The Device is online and should receive commands: "
    var id = " "
    //If the command is status, devices, Stat, etc, this covers everything. Only ips and ids which area  mix of digits and chars will get passed
    if ( njsArg.matches("[a-zA-Z]+")) {
        njsArg = ""
        tuyaLog = "Here are the live tuya devices on your Network: "
    }
    
    
    id = transform("REGEX",'.*(\\sid [0-9a-z]*).*', c) + " "
    
    var broadcastString = BroadcastState.state.toString
    
    //var resp = broadcastString
    var resp = executeCommandLine("python /etc/openhab2/scripts/njstuyamonitor.py " + c, 5000)
    if(db) { logInfo("Tuya", "New broadcast {} for {} with resp {}", broadcastString, njsArg, resp)  }
    if (resp.contains(id)) {
        //var tmpRexp = '.*(/s{[0-9a-zA-Z\\. \\-]* 012001865ccf7f597c1b [0-9a-zA-Z\\. \\-]*}).*'
        var tmpRexp = '.*(\\s[0-9A-Za-z\\- \\.]*' + id + '[0-9A-Za-z\\- \\.]*}).*'
        resp = transform("REGEX",tmpRexp, broadcastString)
        if(db) { logInfo("Tuya", "ID found {} for resp {}", id, resp)  }
    }
    
    //otherwise the ip/id is passed and the function reutrn as soon as it sees that device online. its faster.
    //could set up poll every min or so rather than before each action to make more responsive.
    //var resp = BroadcastState.state.toString
    if( resp.contains("Error") ){
        if(db) { logInfo("Tuya", "Error getting devices [{}]", resp)}
        return "Error"
    }
    
    
    if( ! resp.contains("-ip") ){
        if(db) { logInfo("Tuya", "Error getting devices with ip or id of [{}] \n response was [{}]", c, resp)}
        return "Error" 
    }
    else{
        if(db) { logInfo("Tuya", "{} \n {}", tuyaLog, resp.replace('},', '},\n') )  }   
    }
    
    return resp;

]

rule "Room Action"
when
    Item LivingRoomHeaterCommand received command
then
    locktuya.lock()
    try {

        if (! LivingRoomHeaterDetails.state.toString.contains("key"))
        {
            if(db) { logInfo("tuya", "no config info found running config")}
            tuya_config.sendCommand("config")
        }
        //var resp = getTuyaStatus.apply(LivingRoomHeaterDetails.state.toString)
        var resp = "FINE"
        if ( ! resp.contains("Error") ){
            if(db) { logInfo("Tuya", "Should action command as {}", LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString)        }
            tuyaAction.apply(LivingRoomHeater, LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString) 
        }
        else {
            if(db) { logInfo("Tuya", "Device was not sending availability messages: trying again")}
            Thread::sleep(1000)
            resp = getTuyaStatus.apply(LivingRoomHeaterDetails.state.toString)   
            if(db) { logInfo("Tuya", "Trying again to get avilability state")   }
            Thread::sleep(1000)
            tuyaAction.apply(LivingRoomHeater, LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString) 
        }
        if(db) { logInfo("Tuya", "Normal {} Bad {}", ldtuya, ldtuyaBad)}
        if(LivingRoomHeater.state.toString.contains("UNDEF")){
            Thread::sleep(1000)
            //tuyaAction.apply(LivingRoomHeater, LivingRoomHeaterDetails.state.toString + " REFRESHSTATE") 
        }
    } finally{
        if(db) { logInfo("tuya", "cron living room unlock")}
        locktuya.unlock()
    }
   
//Try action if getTuyaSTatus is locked out      
end
//Gets a list of ip and ids of devices live, 
//Or with an arugment of the ip or id it will respond with the state as soon as found.
rule "Get Live Tuya Devices"
when
    Item is_tuya_online received command
then
    locktuya.lock()
    try {
        var tuyaDevices = getTuyaStatus.apply(receivedCommand.toString)  
        if(db) { logInfo("Tuya", "Here are the live tuya devices on your Network:  \n {}",  tuyaDevices.replace('*|*', "\n") )  }
    } finally{
        if(db) { logInfo("tuya", "cron get live devices unlock")}
        locktuya.unlock()
    }
  
end


rule "Switch Bedroom Action"
when
    Item BedroomHeaterCommand received command
then
    locktuya.lock()
    try {
        if (! BedroomHeaterDetails.state.toString.contains("key"))
        {
            if(db) { logInfo("tuya", "no config info found running config")}
            tuya_config.sendCommand("config")
        }        
        if(db) { logInfo("Tuya", "Should run command as {}", BedroomHeaterDetails.state.toString + " " + receivedCommand.toString)        }
        tuyaAction.apply(BedroomHeater, BedroomHeaterDetails.state.toString + " " + receivedCommand.toString) 
    } finally{
        if(db) { logInfo("tuya", "cron bedroom unlock")}
        locktuya.unlock()
    }

end


rule "Switch heater"
when 
    Item LivingRoomHeater received command
then
    if(db) { logInfo("LivingRoomHeater change", "turning heater to {}", receivedCommand) }
    if ( LivingRoomHeater.state.toString.toLowerCase.contains("on")) {
        LivingRoomHeaterCommand.sendCommand("ON")
    }
    else {
        LivingRoomHeaterCommand.sendCommand("OFF")
    }
end

rule "Control Temp"
when
    Item KitchenThermostatCurrentTemp changed
    or
    Item KitchenThermostatTargetTemp changed
then

    if ( (KitchenThermostatCurrentTemp.state as Number) < (KitchenThermostatTargetTemp.state as Number) ) {
        if(db) { logInfo("Thermostat", "turning on heating from state {} to increase from {} to {}", LivingRoomHeater ,KitchenThermostatCurrentTemp.state, KitchenThermostatTargetTemp.state)}
        if( LivingRoomHeater.state != ON){
            LivingRoomHeaterCommand.sendCommand("ON")
        }
        
    }
    else{
        if(db) { logInfo("Thermostat", "turning off heating to decrease from from {} to {}", KitchenThermostatCurrentTemp.state, KitchenThermostatTargetTemp.state)}
        if( LivingRoomHeater.state != OFF){
            LivingRoomHeaterCommand.sendCommand("OFF")
        }
    }
    Thread::sleep(50000)
    LivingRoomHeaterCommand.sendCommand("STATUS")
end

rule "cron Guard"
when
    Time cron "13 0/1 * * * ?"
then
    //CRON only needs to run when unlocked no need to stack updates over other commands
    if(!locktuya.isLocked()){
        var titerator = gTuya.members.iterator
        while(titerator.hasNext){
            val det = titerator.next
            if(db) { logInfo("Tuya", "Update [{}]", det)}
            sendCommand(det.name + "Command", "STATUS")
        }

    }

end

rule "Update Thermostat Value"
when
    Item HueKitchenTemp changed
then
    if(db) { logInfo("Thermostat", "update kitchen temp {}", HueKitchenTemp)}
    KitchenThermostatCurrentTemp.postUpdate(Float::parseFloat(String::format("%s",HueKitchenTemp.state).replace(' ','')))
end
/*
rule "cron Updates Broadcast"
when
    Time cron "13 0/5 * * * ?"
then
    if(db) { logInfo("Cron Tuya", "Broadcast update start")
    var resp = executeCommandLine("python /etc/openhab2/scripts/njstuyamonitor.py ", 5000)
    if( ! BroadcastState.state.toString.contains("error"))
    {
        BroadcastState.sendCommand(resp)
    }     
    if(db) { logInfo("Cron Tuya", "Broadcast update {}, from {}", BroadcastState.state, resp)
end
*/
/*
Doesn't work well. gTuya doesn't trigger when members change. Only sometimes
*/
rule "undef update"
when
    Item gTuya received updated or
    Item gTuya received command or
    Item gTuya changed
then

    if(db) { logInfo("Tuya", "UNDEF ITEM [{}]", gTuya)}
    var titerator = gTuya.members.iterator
    while(titerator.hasNext){
        val det = titerator.next
        if( det.state.toString.contains("UNDEF")){
            if(db) { logInfo("Tuya", "UNDEF ITEM [{}]", det)}
            sendCommand(det.name + "Command", "REFRESH")
        }
    }
end

rule "Tuya Manual state"
when
    Item TuyaManual received command
then
    locktuya.lock()
    var idList = newArrayList()
    var ipList = newArrayList()
    var keyList = newArrayList()
    var stateList = newArrayList()
    try {
        var resp = executeCommandLine("python /etc/openhab2/scripts/njstuyamonitor.py ", 50000)
        if(db) { logInfo("Tuya", "Manualt update {}, from {}", BroadcastState.state, resp)}
        if( ! resp.contains("Devices")){

        }
        else{
            var pureResp = resp.replace("{ Devices: [", "")
            var splitString = pureResp.split(',')

            val iterator = splitString.iterator
            while(iterator.hasNext) {
                val str = iterator.next
                var id = transform("REGEX", '.*id ([0-9a-z]*).*', str)
                if( id !== null)
                {
                    idList.add(id)
                    var ip = transform("REGEX", '.*ip ([0-9a-z\\.]*).*', str)
                    ipList.add(ip)
                    

                    var titerator = gTuyaDetails.members.iterator
                    while(titerator.hasNext){
                        val det = titerator.next
                        if( det.state.toString.contains(id)){
                            stateList.add(det.getLabel)
                            if(db) { logInfo("Tuya", " update state for id {}, ip {}, item {}", id, ip, det.getLabel)}
                            val endit = titerator.last
                        }
                    }
                }
            }

            if(db) { logInfo("Tuya", "Manual update id : [{}] ip: [{}] from resp {}", idList, ipList, resp)}


        }

        
    } finally{
        if(db) { logInfo("tuya", "cron manual unlock")}
        locktuya.unlock()
    } 
    stateList.forEach [ str |
        sendCommand(str, "STATE")
        //if(db) { logInfo("Tuya", " update list done {}",str)
    ]      
    //LivingRoomHeaterCommand.sendCommand("STATUS")
   //BedroomHeaterCommand.sendCommand("STATUS")

end

/*

rule "cron Updates Status"
    when
        Time cron "0/10 * * * * ?"
    then
         if(db) { logInfo("Thermostat cron", "cron {}", now.millis)

        var cprog =  now.millis  - 

        if ( spotify_current_playing.state == ON ){
            cprog = cprog - (spotify_current_update_time.state as DateTimeType).calendar.timeInMillis
            
            if( spotify_current_progress.state != NULL ) {
                cprog = cprog + Integer::parseInt(spotify_current_progress.state.toString) 
            }

            if( cprog > Integer::parseInt(spotify_current_duration.state.toString)){
                if(db) { logInfo("spotify", "new song cprog{} and duration {}", cprog, spotify_current_update_time.state)
                cprog=1
                spotify_current_progress.sendCommand("1")
                if(db) { logInfo("spotify", "new song cprog{} and duration {}", cprog, spotify_current_update_time.state)
                postUpdate(spotify_current_update_time, now.toString)
                if(db) { logInfo("spotify", "new song cprog{} and duration {}", cprog, spotify_current_update_time.state)
                sendCommand(spotify_forceupdate,ON)
                if(db) { logInfo("spotify", "new song cprog{} and duration {}", cprog, spotify_current_update_time.state)
                    
            }
            else{
            postUpdate(spotify_current_progress_estimated, cprog / 1000)   
            }
        }                  
     

end
*/


/*
rule "Switch Living room Action"
    when
		Item LivingRoomHeaterCommand received command
	then
    var loopNumber=RETRIES
    while (loopNumber>0){
        if (! LivingRoomHeaterDetails.state.toString.contains("key"))
        {
            if(db) { logInfo("tuya", "no config info found running config")
            tuya_config.sendCommand("config")
        }
        if ( getTuyaStatus.apply(LivingRoomHeaterDetails.state.toString).contains("-ip") ){
            if(db) { logInfo("Tuya", "Should run command as {}", LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString)        
            tuyaAction.apply(LivingRoomHeater, LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString) 
        }
        else {
            if(db) { logInfo("Tuya", "Device was not sending availability messages")   
        }
        if ( getTuyaStatus.apply(LivingRoomHeaterDetails.state.toString).contains("UNDEF") ) {
            
            Thread::sleep(TUYA_DELAY + 5000 * (RETRIES -loopNumber))
            if(db) { logInfo("Tuya", "Loop number {}",loopNumber)
        } 
        else {
            loopNumber = 0
        }
    loopNumber=loopNumber -1
    }
//Try action if getTuyaSTatus is locked out 
    tuyaAction.apply(LivingRoomHeater, LivingRoomHeaterDetails.state.toString + " " + receivedCommand.toString) 
     
end
*/